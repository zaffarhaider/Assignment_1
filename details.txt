Here come the instructions of a technical test. Please review them, and do not hesitate to ask any question about the format of the data files, or the requirements of the exercises. Obviously, you are expected to complete this work by yourself, as we will assume any of your demonstrated capability a given, following this test, and we want to know where you need to learn more should you need to. This is essential in the hiring process, so we make the best use of everyone's time.

Please kindly respond with a deadline date to have this work completed.

Thanks for addressing this task!

The data is available at https://export.airconomy.com/candidates/

User: candidates

Password: 7!poTNja09ljC

Required: include all your code in Github.
Please promptly update the repository with your ongoing work.
Do not upload the final result when you get it done. Instead, do your work in the public and let us know of changes so we can follow your regular updates.
You should do all the work in a Jupyter notebook. This is a must when working with Python, but not mandatory when working with Scala (although will get bonus points for making all the Scala Spark code with Jupyter)

First exercise: count the number of lines in Python for each file 

Second exercise: top 10 arrival airports in the world in 2013 (using the bookings file)

Arrival airport is the column arr_port. It is the IATA code for the airport

To get the total number of passengers for an airport, you can sum the column pax, grouping by arr_port. Note that there is negative pax. That corresponds to cancelations. So to get the total number of passengers that have actually booked, you should sum including the negatives (that will remove the canceled bookings).

Print the top 10 arrival airports in the standard output, including the number of passengers.

Bonus point: Get the name of the city or airport corresponding to that airport (programatically, we suggest to have a look at GeoBases in Github)

Bonus point: Solve this problem using pandas (instead of any other approach) 

Third exercise: plot the monthly number of searches for flights arriving at Málaga, Madrid or Barcelona

For the arriving airport, you can use the Destination column in the searches file. Plot a curve for Málaga, another one for Madrid, and another one for Barcelona, in the same figure. Bonus point: Solving this problem using pandas (instead of any other approach) 

Bonus exercise: match searches with bookings

For every search in the searches file, find out whether the search ended up in a booking or not (using the info in the bookings file). For instance, search and booking origin and destination should match. For the bookings file, origin and destination are the columns dep_port and arr_port, respectively. Generate a CSV file with the search data, and an additional field, containing 1 if the search ended up in a booking, and 0 otherwise. 

Bonus exercise: write a Web Service

Wrap the output of the second exercise in a web service that returns the data in JSON format (instead of printing to the standard output). The web service should accept a parameter n>0. For the top 10 airports, n is 10. For the X top airports, n is X.